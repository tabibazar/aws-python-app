version: 0.2

env:
  git-credential-helper: yes
  variables:
    ECR_URI: "502768277707.dkr.ecr.ca-central-1.amazonaws.com/aws_python_app"
    AWS_REGION: "ca-central-1"
    AWS_DEFAULT_REGION: "ca-central-1"
    EKS_CLUSTER_NAME: "extravagant-folk-walrus"
    K8S_NAMESPACE: "default"
    K8S_DEPLOYMENT_NAME: "flask-app"
    K8S_CONTAINER_NAME: "flask-app"
    APP_PORT: "8000"
    SVC_PORT: "80"

phases:
  install:
    commands:
      - echo "Installing kubectl and tools"
      - apt-get update -y
      - apt-get install -y jq gettext-base curl
      - |
        curl -L -o /usr/local/bin/kubectl \
          "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x /usr/local/bin/kubectl
      - echo "Starting Docker daemon"
      - nohup /usr/local/bin/dockerd-entrypoint.sh >/tmp/dockerd.log 2>&1 &
      - |
        timeout 60 sh -c 'until docker info >/dev/null 2>&1; do
          echo "Waiting for Docker"; sleep 2;
        done'
      - docker version

  pre_build:
    commands:
      - echo "Login to ECR"
      - REGISTRY_HOST="$(echo "${ECR_URI}" | cut -d'/' -f1)"
      - aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${REGISTRY_HOST}"

  build:
    commands:
      - echo "Build and tag :latest"
      - docker build -t "${ECR_URI}:latest" .

  post_build:
    commands:
      - echo "Push image"
      - docker push "${ECR_URI}:latest"
      - printf '{"image":"%s"}\n' "${ECR_URI}:latest" > image.json

      - echo "Configure kubeconfig"
      - mkdir -p /root/.kube
      - export KUBECONFIG=/root/.kube/config
      - aws sts get-caller-identity
      - aws eks describe-cluster --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"
      - aws eks update-kubeconfig --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"
      - kubectl cluster-info

      - echo "Testing permissions"
      - kubectl get nodes
      - kubectl auth can-i create deployments -n "${K8S_NAMESPACE}"
      - kubectl auth can-i create services -n "${K8S_NAMESPACE}"

      - echo "Create or update Deployment"
      - |
        if kubectl get deploy "${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" >/dev/null 2>&1; then
          kubectl set image deployment/"${K8S_DEPLOYMENT_NAME}" "${K8S_CONTAINER_NAME}=${ECR_URI}:latest" -n "${K8S_NAMESPACE}"
        else
          kubectl create deployment "${K8S_DEPLOYMENT_NAME}" \
            --image="${ECR_URI}:latest" \
            -n "${K8S_NAMESPACE}"
        fi

      - echo "Configure Deployment env/resources/ports"
      - kubectl set env deployment/"${K8S_DEPLOYMENT_NAME}" FLASK_ENV=production -n "${K8S_NAMESPACE}"
      - kubectl set resources deployment/"${K8S_DEPLOYMENT_NAME}" --requests=cpu=100m,memory=128Mi --limits=cpu=500m,memory=512Mi -n "${K8S_NAMESPACE}"
      - |
        kubectl patch deployment "${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" --type='merge' -p="
        {
          \"spec\": {
            \"template\": {
              \"spec\": {
                \"containers\": [{
                  \"name\": \"${K8S_CONTAINER_NAME}\",
                  \"ports\": [{\"containerPort\": ${APP_PORT} }],
                  \"imagePullPolicy\": \"Always\"
                }]
              }
            }
          }
        }" || true

      - echo "Create Service (LoadBalancer) if needed"
      - |
        if ! kubectl get svc "${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" >/dev/null 2>&1; then
          kubectl expose deployment "${K8S_DEPLOYMENT_NAME}" \
            --type=LoadBalancer \
            --name="${K8S_DEPLOYMENT_NAME}" \
            --port="${SVC_PORT}" \
            --target-port="${APP_PORT}" \
            -n "${K8S_NAMESPACE}"
        fi

      - echo "Annotate Service for public NLB + cross-zone"
      - |
        kubectl annotate svc "${K8S_DEPLOYMENT_NAME}" \
          "service.beta.kubernetes.io/aws-load-balancer-type=nlb" \
          "service.beta.kubernetes.io/aws-load-balancer-scheme=internet-facing" \
          "service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=true" \
          -n "${K8S_NAMESPACE}" --overwrite

      - echo "Wait for rollout"
      - |
        if ! kubectl rollout status deployment/"${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" --timeout=10m; then
          echo "Rollout failed or timed out. Diagnostics:"
          kubectl describe deployment "${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" || true
          kubectl get pods -l app="${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" -o wide || true
          kubectl get events -n "${K8S_NAMESPACE}" --sort-by=.lastTimestamp | tail -20 || true
          POD_NAME=$(kubectl get pods -l app="${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          if [ -n "$POD_NAME" ]; then
            kubectl logs "$POD_NAME" -n "${K8S_NAMESPACE}" --tail=50 || true
            kubectl describe pod "$POD_NAME" -n "${K8S_NAMESPACE}" || true
          fi
          exit 1
        fi

      - echo "Fetch LoadBalancer address"
      - |
        for i in $(seq 1 60); do
          H=$(kubectl get svc "${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" 2>/dev/null || true)
          IP=$(kubectl get svc "${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null || true)
          if [ -n "$H$IP" ]; then
            ADDR="${H:-$IP}"
            echo "Service URL: http://${ADDR}:${SVC_PORT}"
            curl -f -m 10 "http://${ADDR}:${SVC_PORT}" || echo "Warning: HTTP check failed"
            break
          fi
          echo "Waiting for EXTERNAL-IP... ($i/60)"
          sleep 10
        done

artifacts:
  files:
    - image.json
  discard-paths: yes