version: 0.2

env:
  git-credential-helper: yes
  variables:
    ECR_URI: "502768277707.dkr.ecr.ca-central-1.amazonaws.com/aws_python_app"
    AWS_REGION: "ca-central-1"
    AWS_DEFAULT_REGION: "ca-central-1"
    EKS_CLUSTER_NAME: "aws-python-app-dev"
    K8S_NAMESPACE: "default"
    K8S_DEPLOYMENT_NAME: "flask-app"
    K8S_CONTAINER_NAME: "flask-app"
    DEPLOYMENT_FILE: "k8s/deployment.yaml"
    SERVICE_FILE: "k8s/service.yml"

phases:
  install:
    commands:
      - echo "Installing kubectl, jq, and curl"
      - apt-get update -y
      - apt-get install -y jq gettext-base curl
      - curl -L -o /usr/local/bin/kubectl "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x /usr/local/bin/kubectl
      - echo "Starting Docker daemon"
      - nohup /usr/local/bin/dockerd-entrypoint.sh >/tmp/dockerd.log 2>&1 &
      - timeout 60 sh -c 'until docker info >/dev/null 2>&1; do echo Waiting for Docker; sleep 2; done'
      - docker version

  pre_build:
    commands:
      - echo "Logging in to ECR"
      - REGISTRY_HOST="$(echo "${ECR_URI}" | cut -d'/' -f1)"
      - aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${REGISTRY_HOST}"

  build:
    commands:
      - echo "Building and tagging image as :latest"
      - docker build -t "${ECR_URI}:latest" .

  post_build:
    commands:
      - echo "Pushing image"
      - docker push "${ECR_URI}:latest"
      - printf '{"image":"%s"}\n' "${ECR_URI}:latest" > image.json

      - echo "Configuring kubeconfig"
      - export KUBECONFIG=/root/.kube/config
      - aws sts get-caller-identity
      - aws eks describe-cluster --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"
      - aws eks update-kubeconfig --name "${EKS_CLUSTER_NAME}" --region "${AWS_REGION}"

      - echo "Applying manifests from k8s/"
      - kubectl apply -f "${DEPLOYMENT_FILE}" -n "${K8S_NAMESPACE}"
      - kubectl apply -f "${SERVICE_FILE}" -n "${K8S_NAMESPACE}"

      - echo "Patching deployment to use :latest"
      - kubectl set image "deployment/${K8S_DEPLOYMENT_NAME}" "${K8S_CONTAINER_NAME}=${ECR_URI}:latest" -n "${K8S_NAMESPACE}"

      - echo "Waiting for rollout"
      - kubectl rollout status "deployment/${K8S_DEPLOYMENT_NAME}" -n "${K8S_NAMESPACE}" --timeout=5m

artifacts:
  files:
    - image.json
  discard-paths: yes