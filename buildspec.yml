version: 0.2

env:
  git-credential-helper: yes
  variables:
    AWS_REGION: "ca-central-1"           # override in project env if you like
    ECR_REPO_NAME: "flask-app"
    EKS_CLUSTER_NAME: "prod"
    K8S_NAMESPACE: "default"
    K8S_DEPLOYMENT_NAME: "flask-app"
    K8S_CONTAINER_NAME: "flask-app"

phases:
  install:
    runtime-versions:
      docker: 20
    commands:
      - echo "Installing dependencies (kubectl, jq, gettext)..."
      - yum install -y jq gettext
      - curl -L -o /usr/local/bin/kubectl "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x /usr/local/bin/kubectl

  pre_build:
    commands:
      - echo "Resolving values and logging into ECR..."
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - ECR_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - echo "Building ${ECR_URI}:${IMAGE_TAG}"

  build:
    commands:
      - docker build -t ${ECR_URI}:${IMAGE_TAG} -t ${ECR_URI}:latest .

  post_build:
    commands:
      - docker push ${ECR_URI}:${IMAGE_TAG}
      - docker push ${ECR_URI}:latest
      - printf '{"image":"%s"}' "${ECR_URI}:${IMAGE_TAG}" > image.json

      - echo "Configuring kubeconfig for ${EKS_CLUSTER_NAME}..."
      - aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION}

      - echo "Creating namespace if missing..."
      - kubectl get ns ${K8S_NAMESPACE} || kubectl create ns ${K8S_NAMESPACE}

      - echo "Applying base manifests (safe to re-apply)..."
      - kubectl apply -f k8s/ -n ${K8S_NAMESPACE} || true

      - echo "Rolling out new image..."
      - kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_CONTAINER_NAME}=${ECR_URI}:${IMAGE_TAG} -n ${K8S_NAMESPACE}
      - kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} -n ${K8S_NAMESPACE} --timeout=5m

artifacts:
  files:
    - image.json
  discard-paths: yes